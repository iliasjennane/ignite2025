@page "/agents/ops-risk"
@using AgentCouncil.BlazorWasm.Services
@using AgentCouncil.BlazorWasm.Models
@inject IAgentsClient AgentsClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Style="padding: 0.5rem 1rem;">
    <!-- Ultra-Compact Header with Inline Sample Query Chips -->
    <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.75rem; gap: 1rem; flex-wrap: wrap;">
        <!-- Agent Title with Icon -->
        <div style="display: flex; align-items: center; gap: 0.625rem;">
            <div style="width: 32px; height: 32px; border-radius: 6px; background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); display: flex; align-items: center; justify-content: center; box-shadow: 0 2px 6px rgba(231, 76, 60, 0.25); flex-shrink: 0;">
                <MudIcon Icon="@Icons.Material.Filled.Shield" Style="color: white; font-size: 18px;" />
            </div>
            <div>
                <MudText Typo="Typo.h6" Style="color: #2c3e50; font-weight: 700; margin: 0; line-height: 1.2; font-size: 1.125rem;">Ops Risk Agent</MudText>
                <MudText Typo="Typo.caption" Style="color: #666; margin: 0; font-size: 0.75rem;">Risk analysis powered by Fabric</MudText>
            </div>
        </div>
        
        <!-- Quick Query Chips -->
        <div style="display: flex; gap: 0.375rem; flex-wrap: wrap;">
            <MudChip T="string" Text="⏱️ Lead Time Analysis" Size="Size.Small" Color="Color.Default" OnClick="@(() => SetQuery("Calculate average lead time from order to delivery by region over the past quarter, and flag any region where the lead time exceeds 45 days."))" Style="cursor: pointer; height: 24px; font-size: 0.75rem;" />
            <MudChip T="string" Text="📦 Inventory Turnover" Size="Size.Small" Color="Color.Default" OnClick="@(() => SetQuery("Analyze inventory turnover for each brand: for the last fiscal year, compute (units sold)/(average inventory) and identify the brand with the worst turnover rate."))" Style="cursor: pointer; height: 24px; font-size: 0.75rem;" />
            <MudChip T="string" Text="🚚 Logistics Impact" Size="Size.Small" Color="Color.Default" OnClick="@(() => SetQuery("Determine the cost impact of logistics delays: for shipments delayed > 5 days, estimate lost revenue or additional cost by brand and region."))" Style="cursor: pointer; height: 24px; font-size: 0.75rem;" />
        </div>
    </div>

    <!-- Chat Interface -->
    <MudPaper Elevation="2" Class="pa-2" Style="border-radius: 10px; background: white; box-shadow: 0 2px 8px rgba(0,0,0,0.06);">
        <MudStack Spacing="1">
            <!-- Chat Messages -->
            <MudPaper Elevation="0" Class="chat-container" Style="height: 450px; overflow-y: auto; border-radius: 8px; background: #fafafa; border: 1px solid rgba(0,0,0,0.08);">
                <MudStack Spacing="2" Class="pa-3">
                    @if (messages.Count == 0)
                    {
                        <MudStack AlignItems="MudBlazor.AlignItems.Center" Spacing="3" Class="mt-8">
                            <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Large" Style="color: #e74c3c; opacity: 0.6;" />
                            <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Style="color: #666;">
                                Start a conversation with the Ops Risk agent
                            </MudText>
                            <MudText Typo="Typo.body2" Align="MudBlazor.Align.Center" Style="color: #999;">
                                Try one of the sample queries above or ask your own question
                            </MudText>
                        </MudStack>
                    }
                    else
                    {
                        @foreach (var message in messages)
                        {
                            <MudStack direction="Row" Justify="@(message.IsUser ? MudBlazor.Justify.FlexEnd : MudBlazor.Justify.FlexStart)" AlignItems="MudBlazor.AlignItems.Start" Spacing="2">
                                @if (!message.IsUser)
                                {
                                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Style="margin-top: 4px; background-color: #e74c3c;">
                                        <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                                    </MudAvatar>
                                }
                                <MudPaper Class="pa-3" Elevation="1" Style="@GetMessageStyle(message)">
                                    <MudText Typo="Typo.body1" Style="white-space: pre-wrap; margin: 0;">@message.Content</MudText>
                                    <MudText Typo="Typo.caption" Style="@GetTimestampStyle(message)">@message.Timestamp.ToString("HH:mm")</MudText>
                                </MudPaper>
                                @if (message.IsUser)
                                {
                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Style="margin-top: 4px; background-color: #667eea;">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    </MudAvatar>
                                }
                            </MudStack>
                        }
                    }
                    @if (isLoading)
                    {
                        <MudStack direction="Row" Justify="MudBlazor.Justify.FlexStart" AlignItems="MudBlazor.AlignItems.Start" Spacing="2">
                            <MudAvatar Color="Color.Secondary" Size="Size.Small" Style="margin-top: 4px; background-color: #e74c3c;">
                                <MudIcon Icon="@Icons.Material.Filled.SmartToy" />
                            </MudAvatar>
                            <MudPaper Class="pa-3" Elevation="1" Style="background: #f8f9fa; border-radius: 12px;">
                                <MudStack direction="Row" AlignItems="MudBlazor.AlignItems.Center" Spacing="2">
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <MudText Typo="Typo.body2" Style="color: #666;">Agent is analyzing your request...</MudText>
                                </MudStack>
                            </MudPaper>
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>

            <!-- Input Area -->
            <MudPaper Elevation="0" Class="pa-2" Style="border-radius: 8px; background: #f8f9fa; border: 1px solid rgba(0,0,0,0.08);">
                <form @onsubmit="SendMessage" @onsubmit:preventDefault>
                    <div style="display: flex; align-items: flex-end; gap: 12px;">
                        <!-- Mic Button on Left -->
                        <MudIconButton Icon="@Icons.Material.Filled.Mic"
                                       Color="Color.Secondary"
                                       OnClick="StartVoiceInput"
                                       Disabled="@isLoading"
                                       ButtonType="ButtonType.Button"
                                       Style="color: #e74c3c; flex-shrink: 0;" />
                        
                        <!-- Multi-line Text Input -->
                        <MudTextField @bind-Value="currentMessage" 
                                     Placeholder="Type your message... (Enter to send)" 
                                     Variant="Variant.Outlined" 
                                     Lines="1"
                                     Disabled="@isLoading"
                                     FullWidth="true"
                                     Style="flex: 1; background: white; min-width: 0;" />
                        
                        <!-- Send Button on Right -->
                        <MudIconButton Icon="@Icons.Material.Filled.Send"
                                       ButtonType="ButtonType.Submit"
                                       Disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))"
                                       Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; flex-shrink: 0;" />
                    </div>
                </form>
            </MudPaper>
        </MudStack>
    </MudPaper>
</MudContainer>

<style>
.sample-query-card {
    cursor: pointer;
    transition: all 0.3s ease-in-out;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.sample-query-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.15);
    border-color: #e74c3c;
    background: linear-gradient(135deg, #f8f9fa 0%, #ffebee 100%);
}

.chat-container {
    scrollbar-width: thin;
    scrollbar-color: #e74c3c #f1f1f1;
}

.chat-container::-webkit-scrollbar {
    width: 6px;
}

.chat-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
}

.chat-container::-webkit-scrollbar-thumb {
    background: #e74c3c;
    border-radius: 3px;
}

.chat-container::-webkit-scrollbar-thumb:hover {
    background: #c0392b;
}
</style>

@code {
    private string currentMessage = "";
    private bool isLoading = false;
    private List<ChatMessage> messages = new();

    protected override void OnInitialized()
    {
        messages.Add(new ChatMessage 
        { 
            Content = "Hello! I'm the Ops Risk Agent. I can help you analyze operational risks, identify bottlenecks, and optimize your business processes using Fabric data. How can I assist you today?", 
            IsUser = false, 
            Timestamp = DateTime.Now 
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage)) return;

        var userMessage = new ChatMessage
        {
            Content = currentMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        };

        messages.Add(userMessage);
        var messageToSend = currentMessage;
        currentMessage = "";
        isLoading = true;

        try
        {
            var request = new AgentRequest(
                AgentName: "ops_analyst",
                Query: messageToSend
            );

            var response = await AgentsClient.ExecuteAsync(request);
            
            var agentMessage = new ChatMessage
            {
                Content = response?.Summary ?? "I'm sorry, I couldn't process your request at the moment. Please try again.",
                IsUser = false,
                Timestamp = DateTime.Now
            };

            messages.Add(agentMessage);
        }
        catch (Exception ex)
        {
            var errorMessage = new ChatMessage
            {
                Content = $"I encountered an error: {ex.Message}. Please check your connection and try again.",
                IsUser = false,
                Timestamp = DateTime.Now
            };
            messages.Add(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetQuery(string query)
    {
        currentMessage = query;
    }

    private async Task StartVoiceInput()
    {
        // Placeholder for voice input functionality
        await JSRuntime.InvokeVoidAsync("alert", "Voice input feature coming soon! 🎤");
    }

    private string GetMessageStyle(ChatMessage message)
    {
        var baseStyle = "max-width: 80%; border-radius: 12px; padding: 12px;";
        if (message.IsUser)
        {
            return $"{baseStyle} background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;";
        }
        else
        {
            return $"{baseStyle} background: white; color: #333; border: 1px solid #e0e0e0;";
        }
    }

    private string GetTimestampStyle(ChatMessage message)
    {
        if (message.IsUser)
        {
            return "color: rgba(255,255,255,0.7); margin-top: 4px; font-size: 0.75rem;";
        }
        else
        {
            return "color: #999; margin-top: 4px; font-size: 0.75rem;";
        }
    }

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }
}