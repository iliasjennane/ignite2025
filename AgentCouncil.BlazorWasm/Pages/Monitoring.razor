@page "/monitoring"
@using AgentCouncil.BlazorWasm.Services
@using AgentCouncil.BlazorWasm.Models
@inject MonitoringClient MonitoringClient

<PageTitle>Agent Monitoring</PageTitle>

<div class="monitoring-page">
    <div class="page-header">
        <div>
            <h1 class="page-title">Agent Monitoring</h1>
            <p class="page-subtitle">Application Insights Query Results</p>
        </div>
    </div>

    <!-- Query Card -->
    <div class="query-card">
        <div class="card-header">
            <div class="header-content">
                <button class="collapse-toggle" @onclick="ToggleCollapse">
                    <i class="bi @(isExpanded ? "bi-chevron-down" : "bi-chevron-right")"></i>
                </button>
                <h5 class="query-title">1. Active agents and usage frequency</h5>
            </div>
            <button class="run-button" @onclick="RunQuery" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner"></span>
                }
                else
                {
                    <i class="bi bi-play-fill"></i>
                }
                Run Query
            </button>
        </div>
        @if (isExpanded)
        {
            <div class="card-content">
            <pre class="query-box">@kqlQuery</pre>
            
            @if (errorMessage != null)
            {
                <div class="error-alert">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                    <strong>Error:</strong> @errorMessage
                </div>
            }
            
            @if (hasResults && !isLoading)
            {
                <div class="results-section">
                    <h6 class="results-title">Results</h6>
                    @if (agentUsage.Any())
                    {
                        <div class="results-table-wrapper">
                            <table class="results-table">
                                <thead>
                                    <tr>
                                        <th>Agent Name</th>
                                        <th class="text-end">Calls</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var agent in agentUsage)
                                    {
                                        <tr>
                                            <td class="agent-name"><code>@agent.Key</code></td>
                                            <td class="calls-count"><strong>@agent.Value</strong></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="info-alert">
                            <i class="bi bi-info-circle-fill"></i>
                            No data found. Make some agent calls to see results.
                        </div>
                    }
                </div>
            }
            </div>
        }
    </div>
</div>

<style>
    .collapse-toggle {
        background: rgba(255, 255, 255, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.375rem;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 28px;
        height: 28px;
    }

    .collapse-toggle:hover {
        background: rgba(255, 255, 255, 0.25);
        transform: scale(1.05);
    }

    .collapse-toggle i {
        font-size: 1rem;
    }
    .monitoring-page {
        padding: 1.5rem;
    }

    .page-header {
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-weight: 700;
        color: #1a202c;
        letter-spacing: -0.02em;
        margin-bottom: 0.5rem;
    }

    .page-subtitle {
        color: #4a5568;
        margin: 0;
    }

    .query-card {
        background: white;
        border-radius: 12px;
        border: 1px solid rgba(0, 0, 0, 0.08);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
        overflow: hidden;
        transition: all 0.2s ease;
    }

    .query-card:hover {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .query-title {
        font-weight: 600;
        margin: 0;
        font-size: 1rem;
    }

    .run-button {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .run-button:hover:not(:disabled) {
        background: rgba(255, 255, 255, 0.3);
        border-color: rgba(255, 255, 255, 0.4);
        transform: translateY(-1px);
    }

    .run-button:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .spinner {
        width: 14px;
        height: 14px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.6s linear infinite;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    .card-content {
        padding: 1.5rem;
    }

    .query-box {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        margin: 0;
        font-family: 'Courier New', monospace;
        font-size: 0.875rem;
        line-height: 1.6;
        overflow-x: auto;
        white-space: pre;
        color: #495057;
    }

    .error-alert {
        background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .error-alert i {
        font-size: 1.25rem;
    }

    .info-alert {
        background: #e3f2fd;
        color: #1976d2;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .info-alert i {
        font-size: 1.25rem;
    }

    .results-section {
        margin-top: 1.5rem;
    }

    .results-title {
        font-weight: 600;
        color: #1a202c;
        margin-bottom: 0.75rem;
    }

    .results-table-wrapper {
        border: 1px solid #e9ecef;
        border-radius: 8px;
        overflow: hidden;
    }

    .results-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
    }

    .results-table thead {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .results-table th {
        padding: 0.75rem 1rem;
        text-align: left;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .results-table tbody tr {
        border-bottom: 1px solid #e9ecef;
        transition: background 0.2s ease;
    }

    .results-table tbody tr:last-child {
        border-bottom: none;
    }

    .results-table tbody tr:hover {
        background: #f8f9fa;
    }

    .results-table td {
        padding: 0.875rem 1rem;
    }

    .agent-name {
        font-size: 0.875rem;
    }

    .agent-name code {
        background: #f1f3f5;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        color: #667eea;
        font-weight: 600;
    }

    .calls-count {
        font-weight: 700;
        color: #1a202c;
        font-size: 1rem;
    }

    @@media (max-width: 768px) {
        .monitoring-page {
            padding: 1rem;
        }

        .card-header {
            flex-direction: column;
            gap: 0.75rem;
            align-items: flex-start;
        }

        .run-button {
            width: 100%;
            justify-content: center;
        }
    }
</style>

@code {
    private bool isExpanded = true;
    private bool isLoading = false;
    private string? errorMessage;
    private bool hasResults = false;
    private Dictionary<string, int> agentUsage = new();
    private string kqlQuery = @"dependencies
| where timestamp > ago(7d)
| extend agentName = tostring(customDimensions[""agent.name""])
| where isnotempty(agentName)
| summarize Calls = count() by agentName
| sort by Calls desc";

    private void ToggleCollapse()
    {
        isExpanded = !isExpanded;
        StateHasChanged();
    }

    private async Task RunQuery()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            hasResults = false;
            StateHasChanged();

            agentUsage = await MonitoringClient.GetAgentUsageAsync();
            hasResults = true;

            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
            isLoading = false;
        }

        StateHasChanged();
    }
}